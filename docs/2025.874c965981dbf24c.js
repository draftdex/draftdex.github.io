"use strict";(self.webpackChunkDraftDex=self.webpackChunkDraftDex||[]).push([[2025],{2025:(c,a,o)=>{o.r(a),o.d(a,{DocumentationModule:()=>p});var r=o(177),s=o(4007),e=o(4438);let l=(()=>{class t{static#e=this.\u0275fac=function(n){return new(n||t)};static#t=this.\u0275cmp=e.VBU({type:t,selectors:[["ng-component"]],decls:152,vars:0,consts:[[1,"card"],[1,"app-code"],[1,"font-semibold"],[1,"text-primary","font-medium"],[1,"video-container"],["width","560","height","315","src",e.wXG`https://www.youtube.com/embed/yl2f8KKY204`,"frameborder","0","allowfullscreen",""],[1,"line-height-4"],[1,"text-sm"],["href","https://www.youtube.com/watch?v=5VOuUdDXRsE",1,"font-medium","text-primary","hover:underline"],["href","https://www.primefaces.org/designer/primeng"],["href","https://www.primefaces.org/designer/api/primeng/15.0.0/",1,"font-medium","text-primary","hover:underline"]],template:function(n,d){1&n&&(e.j41(0,"div",0)(1,"h2"),e.EFF(2,"Documentation"),e.k0s(),e.j41(3,"h4"),e.EFF(4,"Getting Started"),e.k0s(),e.j41(5,"p"),e.EFF(6,"Apollo is an application template for Angular and is distributed as a CLI project. Current versions is Angular v16 with PrimeNG v16. In case CLI is not installed already, use the command below to set it up."),e.k0s(),e.j41(7,"pre",1)(8,"code"),e.EFF(9,"npm install -g @angular/cli"),e.k0s()(),e.j41(10,"p"),e.EFF(11,'Once CLI is ready in your system, extract the contents of the zip file distribution, cd to the directory, install the libraries from npm and then execute "ng serve" to run the application in your local environment.'),e.k0s(),e.j41(12,"pre",1)(13,"code"),e.EFF(14,"cd apollo\nnpm install\nng serve"),e.k0s()(),e.j41(15,"p"),e.EFF(16,"The application should run at "),e.j41(17,"span",2),e.EFF(18,"http://localhost:4200/"),e.k0s(),e.EFF(19,", you may now start with the development of your application."),e.k0s(),e.j41(20,"h5"),e.EFF(21,"Important CLI Commands"),e.k0s(),e.j41(22,"p"),e.EFF(23,"Following commands are derived from CLI."),e.k0s(),e.j41(24,"pre",1)(25,"code"),e.EFF(26,"Run 'ng serve' for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.\n\nRun 'ng generate component component-name' to generate a new component. You can also use `ng generate directive/pipe/service/class/module`.\n\nRun 'ng build' to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.\n\nRun 'ng test' to execute the unit tests via [Karma](https://karma-runner.github.io).\n\nRun 'ng e2e' to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).\n\nRun 'ng help' for more options."),e.k0s()(),e.j41(27,"h4"),e.EFF(28,"Structure"),e.k0s(),e.j41(29,"p"),e.EFF(30,"Apollo consists of 3 main parts; the application layout, layout assets and PrimeNG component theme assets. Layout is placed inside the "),e.j41(31,"span",3),e.EFF(32,"src/app/layout"),e.k0s(),e.EFF(33," folder, and the assets are in the "),e.j41(34,"span",3),e.EFF(35,"src/assets/layout"),e.k0s(),e.EFF(36," folder. "),e.k0s(),e.j41(37,"h5"),e.EFF(38,"Default Configuration"),e.k0s(),e.j41(39,"p"),e.EFF(40,"Initial layout configuration can be defined at the main app component by injecting the "),e.j41(41,"span",3),e.EFF(42,"LayoutService"),e.k0s(),e.EFF(43,", this step is optional and only necessary when customizing the defaults. Note that "),e.j41(44,"span",3),e.EFF(45,"theme"),e.k0s(),e.EFF(46," and "),e.j41(47,"span",3),e.EFF(48,"scale"),e.k0s(),e.EFF(49," are not reactive since theme is configured outside of Angular at "),e.j41(50,"strong",2),e.EFF(51,"index.html"),e.k0s(),e.EFF(52," by default and initial scale is defined with the "),e.j41(53,"span",3),e.EFF(54,"$scale"),e.k0s(),e.EFF(55," at "),e.j41(56,"strong",2),e.EFF(57,"layout.scss"),e.k0s(),e.EFF(58,". When default theme or scale is changed at their files initially, it is required to configure the layout service with the matching values to avoid sync issues. "),e.k0s(),e.j41(59,"pre",1)(60,"code"),e.EFF(61,'import { Component, OnInit } from \'@angular/core\';\nimport { PrimeNGConfig } from \'primeng/api\';\nimport { LayoutService } from \'./layout/service/app.layout.service\';\n\n@Component({\n    selector: \'app-root\',\n    templateUrl: \'./app.component.html\'\n})\nexport class AppComponent implements OnInit {\n\n    constructor(private primengConfig: PrimeNGConfig, private layoutService: LayoutService) { }\n\n    ngOnInit(): void {\n        this.primengConfig.ripple = true;       //enables core ripple functionality\n\n        //optional configuration with the default configuration\n        this.layoutService.config = {\n            ripple: false,                      //toggles ripple on and off\n            inputStyle: \'outlined\',             //default style for input elements\n            menuMode: \'static\',                 //layout mode of the menu, valid values are "static", "overlay", "slim", "horizontal", "reveal" and "drawer" \n            colorScheme: \'light\',               //color scheme of the template, valid values are "light", "dim" and "dark"\n            theme: \'indigo\',                    //default component theme for PrimeNG\n            menuTheme: "colorScheme",           //theme of the menu, valid values are "colorScheme", "primaryColor" and "transparent"\n            scale: 14                           //size of the body font size to scale the whole application\n        };\n    }\n\n}'),e.k0s()(),e.j41(62,"h5"),e.EFF(63,"Menu"),e.k0s(),e.j41(64,"p"),e.EFF(65,"Menu is a separate component defined in "),e.j41(66,"span",3),e.EFF(67,"src/app/layout/app.menu.component.ts"),e.k0s(),e.EFF(68," file and based on PrimeNG MenuModel API. In order to define the menuitems, navigate to this file and define your own model as a nested structure."),e.k0s(),e.j41(69,"pre",1)(70,"code"),e.EFF(71,"import { OnInit } from '@angular/core';\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-menu',\n    templateUrl: './app.menu.component.html'\n})\nexport class AppMenuComponent implements OnInit {\n\n    model: any[];\n\n    ngOnInit() {\n        this.model = [\n            {\n                label: 'Dashboards',\n                icon: 'pi pi-home',\n                items: [\n                    {\n                        label: 'E-Commerce',\n                        icon: 'pi pi-fw pi-home',\n                        routerLink: ['/']\n                    },\n                    {\n                        label: 'Banking',\n                        icon: 'pi pi-fw pi-image',\n                        routerLink: ['/dashboard-banking']\n                    }\n                ]\n            },\n            //...\n        ];\n    }\n}"),e.k0s()(),e.j41(72,"h5"),e.EFF(73,"Breadcrumb"),e.k0s(),e.j41(74,"p"),e.EFF(75,"Breadcrumb component at the topbar section is dynamic and retrieves the path information from the router using the "),e.j41(76,"span",3),e.EFF(77,"data.breadcrumb"),e.k0s(),e.EFF(78," property."),e.k0s(),e.j41(79,"pre",1)(80,"code"),e.EFF(81,"{ path: 'documentation', data: { breadcrumb: 'Documentation' }, loadChildren: () => import('./demo/components/documentation/documentation.module').then(m => m.DocumentationModule) }"),e.k0s()(),e.j41(82,"h4"),e.EFF(83,"Integration with Existing Angular CLI Projects"),e.k0s(),e.j41(84,"p"),e.EFF(85,"Apollo structure is designed in a modular way so that it can easily be integrated with your existing application. We've created a short tutorial with details."),e.k0s(),e.j41(86,"div",4),e.nrm(87,"iframe",5),e.k0s(),e.j41(88,"h4"),e.EFF(89,"Theme"),e.k0s(),e.j41(90,"p"),e.EFF(91,"Apollo provides 24 PrimeNG themes out of the box. Setup of a theme is simple by including the css of theme to your bundle that are located inside "),e.j41(92,"span",3),e.EFF(93,"assets/layout/styles/theme/"),e.k0s(),e.EFF(94," folder such as "),e.j41(95,"span",3),e.EFF(96,"assets/layout/styles/theme/theme-light/blue/theme.css"),e.k0s(),e.EFF(97,"."),e.k0s(),e.j41(98,"p"),e.EFF(99,"A custom theme can be developed by the following steps."),e.k0s(),e.j41(100,"ul")(101,"li",6),e.EFF(102,'Choose a custom theme name such as "mytheme".'),e.k0s(),e.j41(103,"li",6),e.EFF(104,'Create a folder named "mytheme" under '),e.j41(105,"span",2),e.EFF(106,"assets/layouts/styles/theme-light/"),e.k0s(),e.EFF(107," folder."),e.k0s(),e.j41(108,"li",6),e.EFF(109,'Create a file such as theme.scss inside your "mytheme" folder.'),e.k0s(),e.j41(110,"li",6),e.EFF(111,"Define the variables listed below in your file and import the dependencies."),e.k0s(),e.j41(112,"li",6),e.EFF(113,"Include the theme.scss to your application."),e.k0s()(),e.j41(114,"p"),e.EFF(115,"Here are the variables required to create a theme."),e.k0s(),e.j41(116,"pre",1)(117,"code"),e.EFF(118,"$primaryColor: #3B82F6 !default;\n$primaryLightColor: #BFDBFE !default;\n$primaryDarkColor: #2563eb !default;\n$primaryDarkerColor: #1D4ED8 !default;\n$primaryTextColor: #ffffff !default;\n$primary500:#3B82F6 !default;\n\n$highlightBg: #EFF6FF !default;\n$highlightTextColor: $primaryDarkerColor !default;\n\n@import '../_variables';\n@import '../../theme-base/_components';\n@import '../_extensions';"),e.k0s()(),e.j41(119,"h5"),e.EFF(120,"Theme Switcher"),e.k0s(),e.j41(121,"p"),e.EFF(122,"Dynamic theming is built-in to the template and implemented by including the theme via a link tag instead of bundling the theme along with a configurator component to switch it. In order to switch your theme dynamically as well, it needs to be compiled to css. An example sass command to compile the css would be; "),e.k0s(),e.j41(123,"pre",1)(124,"code"),e.EFF(125,"sass --update src/assets/theme/mytheme/theme.scss:src/assets/theme/mytheme/theme.css"),e.k0s()(),e.j41(126,"p",7),e.EFF(127,"*Note: The sass command above is supported by Dart Sass. Please use Dart Sass instead of Ruby Sass."),e.k0s(),e.j41(128,"p"),e.EFF(129,"Another alternative would be creating dynamic bundles, please see the "),e.j41(130,"a",8),e.EFF(131,"video tutorial"),e.k0s(),e.EFF(132," for an example."),e.k0s(),e.j41(133,"h5"),e.EFF(134,"Theme Designer"),e.k0s(),e.j41(135,"p"),e.EFF(136,"Apollo includes a simplified version of the "),e.j41(137,"a",9),e.EFF(138,"PrimeNG Theme Designer"),e.k0s(),e.EFF(139," that only includes the main SASS structure. Full list of SASS variables to customize the components further is available at the "),e.j41(140,"a",10),e.EFF(141,"SASS API"),e.k0s(),e.EFF(142," docs. "),e.k0s(),e.j41(143,"h4"),e.EFF(144,"Migration Guide"),e.k0s(),e.j41(145,"p"),e.EFF(146,"Every important change is included in "),e.j41(147,"b"),e.EFF(148,"CHANGELOG.md"),e.k0s(),e.EFF(149," file at the root folder of the distribution along with the instructions to update. Whenever a major version of Angular is released, a new version of the template is provided that mainly brings compatibility support to the PrimeNG component theming. If there are no compatibility issues on component theming e.g. new components or new functionality to PrimeNG, you may still update your application to the latest Angular and PrimeNG without the need to waiting for an update."),e.k0s(),e.j41(150,"p"),e.EFF(151,'Initial integration with an existing CLI application and the update process is similar. During an update, only the layout folder and layout assets folder need to be updated and overriden, see the "Integration with Existing Angular CLI Projects" section for more information.'),e.k0s()())},styles:["@media screen and (max-width: 991px){.video-container[_ngcontent-%COMP%]{position:relative;width:100%;height:0;padding-bottom:56.25%}.video-container[_ngcontent-%COMP%]   iframe[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%}}"]})}return t})(),m=(()=>{class t{static#e=this.\u0275fac=function(n){return new(n||t)};static#t=this.\u0275mod=e.$C({type:t});static#n=this.\u0275inj=e.G2t({imports:[s.iI.forChild([{path:"",component:l}]),s.iI]})}return t})(),p=(()=>{class t{static#e=this.\u0275fac=function(n){return new(n||t)};static#t=this.\u0275mod=e.$C({type:t});static#n=this.\u0275inj=e.G2t({imports:[r.MD,m]})}return t})()}}]);